package layers

import (
	"strings"
	"testing"

	"github.com/google/gopacket"
)

// The provided diameter packers are

var testPacketDiameterRequest = []byte{
	0x08, 0x00, 0x27, 0xf0, 0xa1, 0x70, 0x08, 0x00, 0x27, 0xd9, 0xb0, 0x9d, 0x08, 0x00, 0x45, 0x00,
	0x00, 0xfc, 0x3f, 0x08, 0x40, 0x00, 0x40, 0x06, 0xa7, 0x5c, 0xc0, 0xa8, 0x69, 0x28, 0xc0, 0xa8,
	0x69, 0x1e, 0x0b, 0x1c, 0x0f, 0x1c, 0x99, 0x6e, 0xf2, 0xca, 0xe4, 0x2e, 0x8e, 0x9b, 0x80, 0x18,
	0x02, 0xda, 0x36, 0x7d, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x1a, 0xcd, 0xd4, 0x00, 0x01,
	0x33, 0x59, 0x01, 0x00, 0x00, 0xc8, 0x80, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x53, 0xca,
	0xfe, 0x6a, 0x7d, 0xc0, 0xa1, 0x1b, 0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x20, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x61, 0x70, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x62,
	0x65, 0x64, 0x2e, 0x61, 0x61, 0x61, 0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x17, 0x65, 0x61,
	0x70, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x61, 0x61, 0x61, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x01, 0xc0, 0xa8, 0x69, 0x28, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x0a, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0d, 0x00, 0x00,
	0x00, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x20, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x16, 0x40, 0x00, 0x00, 0x0c, 0x4b, 0xed, 0x17, 0xdc, 0x00, 0x00,
	0x01, 0x09, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00,
	0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x01, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x01, 0x2b, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
}

var testPacketDiameterAnswer = []byte{
	0x08, 0x00, 0x27, 0xd9, 0xb0, 0x9d, 0x08, 0x00, 0x27, 0xf0, 0xa1, 0x70, 0x08, 0x00, 0x45, 0x00,
	0x01, 0x00, 0xbd, 0xc3, 0x40, 0x00, 0x40, 0x06, 0x28, 0x9d, 0xc0, 0xa8, 0x69, 0x1e, 0xc0, 0xa8,
	0x69, 0x28, 0x0f, 0x1c, 0x0b, 0x1c, 0xe4, 0x2e, 0x8e, 0x9b, 0x99, 0x6e, 0xf3, 0x92, 0x80, 0x18,
	0x01, 0xad, 0xf8, 0x30, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x01, 0x33, 0x61, 0x00, 0x1a,
	0xcd, 0xd4, 0x01, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x53, 0xca,
	0xfe, 0x6a, 0x7d, 0xc0, 0xa1, 0x1b, 0x00, 0x00, 0x01, 0x0c, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00,
	0x07, 0xd1, 0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x1a, 0x67, 0x77, 0x2e, 0x65, 0x61, 0x70,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x2e, 0x61, 0x61, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x28, 0x40, 0x00, 0x00, 0x17, 0x65, 0x61, 0x70, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65,
	0x64, 0x2e, 0x61, 0x61, 0x61, 0x00, 0x00, 0x00, 0x01, 0x16, 0x40, 0x00, 0x00, 0x0c, 0x4b, 0xed,
	0x16, 0x3e, 0x00, 0x00, 0x01, 0x01, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x01, 0xc0, 0xa8, 0x69, 0x1e,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x0d, 0x00, 0x00, 0x00, 0x14, 0x66, 0x72, 0x65, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x00, 0x00, 0x01, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
	0x01, 0x2b, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00,
	0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x03, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x05,
}

var testPacketDiameterAVPs = []byte{
	0x44, 0x8A, 0x5B, 0x63, 0x17, 0xCE, 0x44, 0x8A, 0x5B, 0x63, 0x17, 0xCF, 0x08, 0x00, 0x45, 0x00,
	0x01, 0x78, 0x00, 0x01, 0x00, 0x00, 0x40, 0x06, 0x65, 0x5E, 0x0A, 0x00, 0x00, 0x21, 0x0A, 0x00,
	0x00, 0x01, 0x09, 0x28, 0x0F, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02,
	0x20, 0x00, 0x4E, 0x76, 0x00, 0x00, 0x01, 0x00, 0x01, 0x50, 0xC0, 0x00, 0x01, 0x10, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x40, 0x00,
	0x00, 0x3F, 0x64, 0x69, 0x61, 0x6D, 0x70, 0x72, 0x6F, 0x78, 0x79, 0x32, 0x2E, 0x6C, 0x74, 0x65,
	0x2E, 0x74, 0x63, 0x6C, 0x2E, 0x6E, 0x65, 0x74, 0x3B, 0x32, 0x33, 0x34, 0x32, 0x34, 0x35, 0x34,
	0x3B, 0x39, 0x38, 0x32, 0x33, 0x39, 0x38, 0x32, 0x33, 0x37, 0x3B, 0x33, 0x38, 0x39, 0x63, 0x66,
	0x30, 0x61, 0x30, 0x2D, 0x33, 0x35, 0x35, 0x31, 0x31, 0x00, 0x00, 0x00, 0x01, 0x1B, 0x40, 0x00,
	0x00, 0x0F, 0x74, 0x63, 0x6C, 0x2E, 0x6E, 0x65, 0x74, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40, 0x00,
	0x00, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xCD, 0x40, 0x00, 0x00, 0x1B, 0x63, 0x63,
	0x5F, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2E, 0x6E, 0x65,
	0x74, 0x00, 0x00, 0x00, 0x01, 0xA0, 0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x01, 0x9F, 0x40, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00,
	0x00, 0x1B, 0x75, 0x73, 0x65, 0x72, 0x31, 0x32, 0x33, 0x40, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C,
	0x65, 0x2E, 0x6E, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x37, 0x40, 0x00, 0x00, 0x0C, 0xE1, 0xDB,
	0x4D, 0x90, 0x00, 0x00, 0x01, 0xB5, 0x40, 0x00, 0x00, 0x18, 0x00, 0x00, 0x01, 0xA1, 0x40, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x01, 0xB4, 0x40, 0x00,
	0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00,
	0x01, 0xB9, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x01, 0xBA, 0x00, 0x00,
	0x00, 0x12, 0x48, 0x6F, 0x76, 0x65, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x1B, 0x00, 0x00, 0x00, 0x13, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2E, 0x6E, 0x65,
	0x74, 0x00, 0x00, 0x00, 0x01, 0xB5, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x01, 0xA1, 0x40, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x01, 0xE0, 0x40, 0x00,
	0x00, 0x0C, 0x00, 0x00, 0x00, 0x02,
}

var testPacketDiameterDecoderError = []byte{
	0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x56, 0x00, 0x00, 0x00, 0x0D, 0x62, 0x6C, 0x61, 0x68,
	0x35, 0x00, 0x00, 0x00,
}

func TestPacketDiameterRequest(t *testing.T) {
	packet := gopacket.NewPacket(testPacketDiameterRequest, LinkTypeEthernet, gopacket.DecodeStreamsAsDatagrams)
	if packet.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", packet.ErrorLayer().Error())
	}
	checkLayers(packet, []gopacket.LayerType{LayerTypeEthernet, LayerTypeIPv4, LayerTypeTCP, LayerTypeDiameter}, t)

	if d, ok := packet.Layer(LayerTypeDiameter).(*Diameter); ok {
		if d.Version != 1 {
			t.Errorf("Failed to decode Diameter Version expecting 1 got %d", d.Version)
		}

		if d.Flags != 128 {
			t.Errorf("Failed to decode Diameter Flags expecting 8 got %d", d.Flags)
		}

		if !d.IsRequest() {
			t.Error("expecting request, not an answer")
		}

		if d.MessageLen != 200 {
			t.Errorf("Failed to decode Diameter Message Length expecting 200 got %d", d.MessageLen)
		}

		if d.CommandCode != 257 {
			t.Errorf("Failed to decode Diameter Command Code expecting 257 got %d", d.CommandCode)
		}

		if d.ApplicationID != 0 {
			t.Errorf("Failed to decode Diameter Application ID expecting 0 got %d", d.ApplicationID)
		}

		if d.HopByHopID != 1405812330 {
			t.Errorf("Failed to decode Diameter HopByHopID expecting 1405812330 got %d", d.HopByHopID)
		}

		if d.EndToEndID != 2109776155 {
			t.Errorf("Failed to decode Diameter EndToEndID expecting 2109776155 got %d", d.EndToEndID)
		}

		if len(d.AVPs) != 11 {
			t.Errorf("Failed to decode all AVPs expecting 11 found %d", len(d.AVPs))
		}

	}
}

func TestPacketDiameterAnswer(t *testing.T) {
	packet := gopacket.NewPacket(testPacketDiameterAnswer, LinkTypeEthernet, gopacket.DecodeStreamsAsDatagrams)
	if packet.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", packet.ErrorLayer().Error())
	}
	checkLayers(packet, []gopacket.LayerType{LayerTypeEthernet, LayerTypeIPv4, LayerTypeTCP, LayerTypeDiameter}, t)

	if d, ok := packet.Layer(LayerTypeDiameter).(*Diameter); ok {
		if d.Version != 1 {
			t.Errorf("Failed to decode Diameter Version expecting 1 got %d", d.Version)
		}

		if d.Flags != 0 {
			t.Errorf("Failed to decode Diameter Flags expecting 0 got %d", d.Flags)
		}

		if d.IsRequest() || !d.IsAnswer() {
			t.Error("expecting answer, not a request")
		}

		if d.MessageLen != 204 {
			t.Errorf("Failed to decode Diameter Message Length expecting 204 got %d", d.MessageLen)
		}

		if d.CommandCode != 257 {
			t.Errorf("Failed to decode Diameter Command Code expecting 257 got %d", d.CommandCode)
		}

		if d.ApplicationID != 0 {
			t.Errorf("Failed to decode Diameter Application ID expecting 0 got %d", d.ApplicationID)
		}

		if d.HopByHopID != 1405812330 {
			t.Errorf("Failed to decode Diameter HopByHopID expecting 1405812330 got %d", d.HopByHopID)
		}

		if d.EndToEndID != 2109776155 {
			t.Errorf("Failed to decode Diameter EndToEndID expecting 2109776155 got %d", d.EndToEndID)
		}

		if len(d.AVPs) != 12 {
			t.Errorf("Failed to decode all AVPs expecting 12 found %d", len(d.AVPs))
		}

	}
}

func TestPacketDiameterAVPs(t *testing.T) {

	packet := gopacket.NewPacket(testPacketDiameterAVPs, LinkTypeEthernet, gopacket.DecodeStreamsAsDatagrams)
	if packet.ErrorLayer() != nil {
		t.Error("Failed to decode packet:", packet.ErrorLayer().Error())
	}
	checkLayers(packet, []gopacket.LayerType{LayerTypeEthernet, LayerTypeIPv4, LayerTypeTCP, LayerTypeDiameter}, t)

	if d, ok := packet.Layer(LayerTypeDiameter).(*Diameter); ok {
		if d.Version != 1 {
			t.Errorf("Failed to decode Diameter Version expecting 1 got %d", d.Version)
		}

		if d.MessageLen != 336 {
			t.Errorf("Failed to decode Diameter Message Length expecting 292 got %d", d.MessageLen)
		}

		if len(d.AVPs) != 12 {
			t.Errorf("Failed to decode all AVPs expecting 12 found %d", len(d.AVPs))
		}

		// collect all AVPs in a map
		kvps := make(map[string]*AVP)
		for _, avp := range d.AVPs {
			kvps[avp.AttributeName] = avp
		}

		// format UTF8String
		avp := kvps["Session-Id"]
		if avp.DecodedValue != "diamproxy2.lte.tcl.net;2342454;982398237;389cf0a0-35511" {
			t.Errorf("Session-Id not decoded properly from packet")
		}

		// format Time, decoded as DiameterUnsigned32
		avp = kvps["Event-Timestamp"] // expecting 2020-01-29 00:17:20 UTC for this sample
		evtTime := avp.decoder.(*DiameterTime).decodedData
		evtTime = evtTime.UTC()
		if evtTime.Year() != 2020 || evtTime.Month() != 1 || evtTime.Day() != 29 {
			t.Errorf("Event-Timestamp not decoded properly from packet; expected 2020-01-29, got %s", avp.DecodedValue)
		}

		// format Grouped
		avp = kvps["Service-Parameter-Info"]
		if len(avp.Grouped) != 4 {
			t.Errorf("Grouped avp 'Service-Parameter-Info' not decoded properly; expecting 4 sub-AVPs, found %d", len(avp.Grouped))
		}

		if avp.Grouped[0].AttributeName != "Service-Parameter-Type" {
			t.Errorf("Service-Parameter-Type not decoded properly from grouped AVP Service-Parameter-Info from packet")
		}

		// subgroup of Service-Parameter-Info, containing Unsigned64 field
		if avp.Grouped[3].Grouped[0].DecodedValue != "43" {
			t.Errorf("CC-Service-Specific-Units not decoded properly; expecting 43, got %s", avp.Grouped[3].Grouped[0].DecodedValue)
		}

		// format Enumerated
		avp = kvps["Accounting-Record-Type"]
		if avp.DecodedValue != "START_RECORD" {
			t.Errorf("Accounting-Record-Type not decoded properly from packet; expected START_RECORD, got %s", avp.DecodedValue)
		}
	}
}

func TestPacketDiameterErrors(t *testing.T) {

	// test unsupported decoder error
	packet := gopacket.NewPacket(testPacketDiameterDecoderError, LayerTypeDiameter, gopacket.Default)
	if packet.ErrorLayer() == nil {
		t.Errorf("expecting to fail on decoding IPFilterRule AVP format ... remove this test when implemented")
		return
	}
	if !strings.Contains(packet.ErrorLayer().Error().Error(), "not yet supported") {
		t.Errorf("got an error but not the one expected!")
	}

	// rewrite packet to test unknown AVP error
	testPacketDiameterDecoderError[22] = 0x02
	testPacketDiameterDecoderError[23] = 0xCD

	packet = gopacket.NewPacket(testPacketDiameterDecoderError, LayerTypeDiameter, gopacket.Default)
	if packet.ErrorLayer() == nil {
		t.Errorf("expecting to fail on decoding unknown AVP, but no error encountered!")
		return
	}
	if !strings.Contains(packet.ErrorLayer().Error().Error(), "could not find details for AVP attribute code 717") {
		t.Errorf("got an error but not the one expected!")
	}

}
